import axios from "axios";
import email from "./img/email.png";
import { Link } from "react-scroll";
import youtube from "./img/youtube.png";
import "react-responsive-modal/styles.css";
import phone from "./img/ph_phone-light.png";
import { GoArrowSwitch } from "react-icons/go";
import { Modal } from "react-responsive-modal";
import { useNavigate } from "react-router-dom";
import { useLocation } from "react-router-dom";
import instagram from "./img/mdi_instagram.png";
import React, { useRef, useState } from "react";
import location2 from "./img/carbon_location.png";
import facebook from "./img/iconoir_facebook.png";
import { Navbar, Nav, Button } from "react-bootstrap";
import telegram from "./img/basil_telegram-outline.png";
import eastlinelogo from "./img/eastline-black-logo 1.png";
import SixthComponent from "./sixthComponent";
import { Bounce, ToastContainer, toast } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

export default function Header() {
  let size = localStorage.getItem("count");

  const [takeLoad, setTakeLoad] = useState("");
  const [unload, setUnload] = useState("");
  const [TruckValue, setTruckValue] = useState('');
  const [dateTime, setDateTime] = useState("");
  const [numberValue, setNumberValue] = useState("");
  const [textareaValue, setTextAreaValue] = useState("");

  const [open, setOpen] = useState(false);
  let [openOne, setOpenOne] = useState(false);
  let [openTwo, setOpenTwo] = useState(false);
  let [countWorker, setCountWorker] = useState(JSON.parse(size) ?? 0);
  let navigate = useNavigate();
  let location = useLocation();
  let nameRef = useRef();
  let phoneRef = useRef();
  let textRef = useRef();

  function sendQuestion() {
    setOpen(!open);
  }
  console.log(location.pathname);
  function sendMessageEmail() {
    let Obj = {
      name: nameRef.current.value,
      phone: phoneRef.current.value,
      text: textRef.current.value,
    };
    console.log(Obj);
    let url = "https://example/check";
    axios
      .post(url, Obj)
      .then((response) => {
        console.log("POST request was successful!");
        console.log("Response:", response.data);
      })
      .catch((error) => {
        console.error("POST request failed:", error);
      });
  }

  function backToMain(element) {
    navigate("/");
  }

  function defaultComp() {}

  function increment(params) {
    setCountWorker(++countWorker);
    localStorage.setItem("count", JSON.stringify(countWorker));
  }
  function decrement(params) {
    if (countWorker > 0) {
      setCountWorker(--countWorker);
      localStorage.setItem("count", JSON.stringify(countWorker));
    }
  }

  function changeLoadValue() {
    let valueLoad = takeLoad;
    let valueUnload = unload;
    setTakeLoad(valueUnload);
    setUnload(valueLoad);
  }


  function getAlert(sms) {
    setOpenOne(false);
    toast.success(`ü¶Ñ ${sms}! `, {
    position: "top-right",
    autoClose: 2000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    progress: undefined,
    theme: "dark",
    transition: Bounce,
    });
  }


  function checkEmpty() {
    if (takeLoad!=''&&unload!=''&&TruckValue!='') {
       return true;
       console.log(takeLoad);
    }else return false;
  }


  function sendApplication() {
    let obj = {
      takeLoad,
      unload,
      TruckValue,
      dateTime,
      countWorker,
      numberValue,
      textareaValue,
    };
    if (checkEmpty()) {
      getAlert('request send succesfullt')
    }else getAlert('sending sms error')

    console.log(obj);
  }

  return (
    <div className="headerComponentContainer">
      <ToastContainer
position="top-right"
autoClose={1000}
hideProgressBar={false}
newestOnTop={false}
closeOnClick
rtl={false}
pauseOnFocusLoss
draggable
pauseOnHover
theme="dark"
/>
      <div className="headerTop">
        <div className="headerTopLeft">
          <ul>
            <li>
              <img src={location2} alt="#" /> —É–ª.–°–µ–±–∑–æ—Ä M17/18, 4–¥o–º, 3–∫–≤
            </li>
            <li>
              <a href="https://mail.google.com/mail/u/0/?pli=1#inbox">
                <img src={email} alt="#" /> info@eastline.uz
              </a>
            </li>
            <li>
              <a href="">
                <img src={phone} alt="#" /> +998 93 399 9051
              </a>
            </li>
          </ul>
        </div>
        <div className="headerTopRight">
          <ul>
            <li>
              <a href="https://instagram.com/eastline.pereezd">
                <img src={instagram} alt="#" />
              </a>
            </li>
            <li>
              <a href="https://t.me/eastline_express_uzb">
                <img src={telegram} alt="#" />
              </a>
            </li>
            <li>
              <a href="https://www.facebook.com/profile.php?id=61557130479519">
                <img src={facebook} alt="#" />
              </a>
            </li>
            <li>
              <a href="https://youtube.com/@EastlinePereezd">
                <img src={youtube} alt="#" />
              </a>
            </li>
          </ul>
        </div>
      </div>
      {/* import bootstrap navbar  */}
      <Navbar
        collapseOnSelect
        expand="lg"
        variant="light"
        style={{ margin: "0% 5%" }}
      >
        <Navbar.Brand href="https://eastline.uz">
          <img src={eastlinelogo} alt="Logo 1" className="brand-logo mr-2" />
        </Navbar.Brand>
        <Navbar.Brand href="https://eastline.uz" className="navbarBreand">
          <h6>
            –£–°–õ–£–ì–ò <br /> –ü–ï–†–ï–ï–ó–î–ê
          </h6>
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="responsive-navbar-nav" />
        <Navbar.Collapse id="responsive-navbar-nav">
          <Nav className="ml-auto " style={{}}>
            <hr />
            <button className="calculator" onClick={() => setOpenOne(!openOne)}>
              –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            </button>
            <hr />
            <Link
              onClick={location.pathname != "/" ? backToMain : defaultComp}
              to="third"
              spy={true}
              smooth={true}
              offset={50}
              duration={500}
              type="button"
              className="textHover"
            >
              O –Ω–∞—Å
            </Link>
            <hr />
            <Link
              onClick={location.pathname != "/" ? backToMain : defaultComp}
              to="fourth"
              spy={true}
              smooth={true}
              offset={50}
              duration={500}
              type="button"
              className="textHover"
            >
              –ü–∞—Ä—Ç–Ω–µ—Ä—ã
            </Link>
            <hr />
            <Link
              onClick={location.pathname != "/" ? backToMain : defaultComp}
              to="fifth"
              spy={true}
              smooth={true}
              offset={50}
              duration={500}
              type="button"
              className="textHover"
            >
              –ì–∞–ª–µ—Ä–µ—è
            </Link>
            <hr />
            <Link
              onClick={location.pathname != "/" ? backToMain : defaultComp}
              to="sixth"
              spy={true}
              smooth={true}
              offset={50}
              duration={500}
              type="button"
              className="textHover"
            >
              –£—Å–ª—É–≥–∏
            </Link>
            <hr />
            <Link
              onClick={location.pathname != "/" ? backToMain : defaultComp}
              to="footer"
              spy={true}
              smooth={true}
              offset={50}
              duration={500}
              type="button"
              className="textHover"
            >
              –ö–æ–Ω—Ç–∞–∫—Ç—ã
            </Link>
            <hr />
          </Nav>
          <Button className="askQuestionButton" onClick={sendQuestion}>
            –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
          </Button>
          <Modal
            open={open}
            onClose={() => setOpen(!open)}
            center
            classNames={{
              overlay: "customOverlay",
              modal: "customModal",
            }}
          >
            <div>
              <h5>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h5>
              <label htmlFor="inpName">
                <h6>–ò–º—è</h6>
              </label>
              <input
                id="inpName"
                type="text"
                className="form-control"
                placeholder="–ò–º—è*"
                ref={nameRef}
                required
              />
              <label htmlFor="inpPhone">
                <h6>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h6>
              </label>
              <input
                id="inpPhone"
                type="text"
                className="form-control"
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω*"
                ref={phoneRef}
                required
              />
              <label htmlFor="inpPhone">
                <h6>–°–æ–æ–±—â–µ–Ω–∏–µ</h6>
              </label>
              <textarea
                name="textarea"
                id="textarea"
                cols="30"
                rows="5"
                placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
                className="form-control"
                ref={textRef}
                required
              ></textarea>
              <br />
              <button onClick={sendMessageEmail} className="btnBottom">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
              </button>
            </div>
          </Modal>
        </Navbar.Collapse>
      </Navbar>

      <Modal
        open={openOne}
        onClose={() => setOpenOne(!openOne)}
        center
        classNames={{
          overlay: "customOverlay",
          modal: "customModalOne",
        }}
      >
        <h1>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h1>
        <div className="rowTop">
          <div>
            <label htmlFor="rowTopInputLeft">–ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏</label>
            <input
              value={takeLoad}
              onChange={(e) => {
                setTakeLoad(e.target.value);
              }}
              type="text"
              className="form-control"
              id="rowTopInputLeft"
              placeholder="–ø–æ–≥—Ä—É–∑–∫–∏"
            />
          </div>
          <button onClick={changeLoadValue}>
            <GoArrowSwitch />
          </button>
          <div>
            <label htmlFor="rowTopInputRight">–ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏</label>
            <input
              value={unload}
              onChange={(e) => {
                setUnload(e.target.value);
              }}
              type="text"
              className="form-control"
              id="rowTopInputRight"
              placeholder="–≤—ã–≥—Ä—É–∑–∫–∏"
            />
          </div>
        </div>

        <div className="rowMiddleOne">
          <div>
            <label htmlFor="rowMiddleOneInputLeft">–í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É</label>
            <select
              id="rowMiddleOneInputLeft"
              className="form-select"
              onChange={(e) => setTruckValue(e.target.value)}
            >
              <option value="choose">–í—ã–±—Ä–∞—Ç—å...</option>
              <option value="–õ–∞–±–æ">
                –õ–∞–±–æ / –î–ª–∏–Ω–∞ 2–º / –í–∏—Å–æ—Ç–∞ 1,3–º / –í–µ—Å—å, 0,5—Ç
              </option>
              <option value="–ì–∞–∑–µ–ª—å">
                –ì–∞–∑–µ–ª—å / –î–ª–∏–Ω–∞ 3–º / –í–∏—Å–æ—Ç–∞ 1,5–º / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 3 –º–µ—Ç—Ä–∞">
                –¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 3 –º–µ—Ç—Ä–∞ / –î–ª–∏–Ω–∞ 3–º / –í–∏—Å–æ—Ç–∞ 2–º / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 4 –º–µ—Ç—Ä–∞">
                –¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 4 –º–µ—Ç—Ä–∞ / –î–ª–∏–Ω–∞ 4–º / –í–∏—Å–æ—Ç–∞ 2,2–º / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–ë–æ—Ä—Ç 4 –ú–µ—Ç—Ä–∞">–ë–æ—Ä—Ç 4 –ú–µ—Ç—Ä–∞</option>
              <option value="–§—É—Ä–≥–æ–Ω–∞ , 5 –ú–µ—Ç—Ä–æ–≤ , 5—Ço–Ω–Ω">
                –§—É—Ä–≥–æ–Ω–∞ / 5 –ú–µ—Ç—Ä–æ–≤ / 5—Ço–Ω–Ω
              </option>
            </select>
          </div>

          <button>==</button>
          <div>
            <label htmlFor="rowMiddleOneInputRight">–ö–æ–≥–¥–∞</label>
            <input
              value={dateTime}
              onChange={(e) => setDateTime(e.target.value)}
              type="date"
              className="form-control"
              id="rowMiddleOneInputRight"
            />
          </div>
        </div>

        <div className="rowMiddleTwo">
          <div className="middleTwoLeft">
            <label htmlFor="rowMiddleTwoInputLeft">–ì—Ä—É–∑—á–∏–∫–∏</label>
            <div className="leftDivMiddleTwo" id="rowMiddleTwoInputLeft">
              <h5>{countWorker}</h5>
              <div>
                <button onClick={decrement}>-</button>
                <button onClick={increment}>+</button>
              </div>
            </div>
          </div>
          <button className="btnMiddleTwo">==</button>
          <div className="middleRightTwo">
            <label htmlFor="rowMiddleTwoInputRight">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
            <input
              value={numberValue}
              onChange={(e) => setNumberValue(e.target.value)}
              type="text"
              className="form-control"
              id="rowMiddleTwoInputRight"
              placeholder="+998"
            />
          </div>
        </div>

        <div className="rowBottom">
          <label htmlFor="rowBottom">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
          <textarea
            value={textareaValue}
            onChange={(e) => setTextAreaValue(e.target.value)}
            rows={5}
            id="rowBottom"
            className="form-control"
            placeholder="write text here"
          ></textarea>
        </div>

        <button className="buttonBottom" onClick={sendApplication}>
          –û—Ñ–æ—Ä–º–∏—Ç—å
        </button>
        {/* <button onClick={() => setOpenTwo(!openTwo)}>och</button> */}
      </Modal>
      <Modal
        open={openTwo}
        onClose={() => setOpenTwo(!openTwo)}
        center
        classNames={{
          overlay: "customOverlay",
          modal: "customModal",
        }}
      >
        <h1>alek</h1>
      </Modal>
    </div>
  );
}
