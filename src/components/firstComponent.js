import bigImg1 from "./img/Rectangle 1.png";
import bigImg2 from "./img/Rectangle 3.png";
import bigImg3 from "./img/Rectangle 2.png";
import React, { Component, useEffect, useState } from "react";
import Carousel from "react-bootstrap/Carousel";
import { Modal } from "react-responsive-modal";
import { GoArrowSwitch } from "react-icons/go";
import { Bounce, ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function FirstComponent() {
  useEffect(() => {
    localStorage.removeItem("count");
  }, []);
  let size = localStorage.getItem("count");
  const [summ, setSumm] = useState(0);
  let [carValue, setCarValue] = useState(0);
  const [takeLoad, setTakeLoad] = useState("");
  const [takeHour, setTakeHour] = useState(1);
  const [unload, setUnload] = useState("");
  const [TruckValue, setTruckValue] = useState("");
  const [dateTime, setDateTime] = useState("");
  const [numberValue, setNumberValue] = useState("");
  const [textareaValue, setTextAreaValue] = useState("");
  let [openOne, setOpenOne] = useState(false);
  let [countWorker, setCountWorker] = useState(0);

  function increment() {
    setCountWorker(++countWorker);
    localStorage.setItem("count", JSON.stringify(countWorker));
    let select = document.querySelector("#selectHour");
    let workers = localStorage.getItem("count");
    if (countWorker > 0) {
      select.setAttribute("disabled", "true");
      select.classList.add("changeColorSelect");
      if (takeHour == 1) {
        let value = summ + 150000 * takeHour;
        setSumm(value);
        // localStorage.setItem('summValue',value);
      } else {
        let value = summ + (110000 * takeHour + 40000);
        setSumm(value);
        // localStorage.setItem('summValue',value);
      }
    }
  }

  function decrement(params) {
    let workers = localStorage.getItem("count");
    let select = document.querySelector("#selectHour");

    if (countWorker == 1 && TruckValue == "none") {
      select.removeAttribute("disabled");
      select.classList.remove("changeColorSelect");
    }

    if (countWorker > 0) {
      setCountWorker(--countWorker);
      localStorage.setItem("count", JSON.stringify(countWorker));
    }

    if (workers > 0) {
      if (takeHour == 1) {
        let value = summ - 150000 * takeHour;
        setSumm(value);
        // localStorage.setItem('summValue',value);
      } else {
        let value = summ - (110000 * takeHour + 40000);
        setSumm(value);
        // localStorage.setItem('summValue',value);
      }
    }
  }

  function checkEmpty() {
    if (takeLoad != "" && unload != "" && TruckValue != "") {
      return true;
      console.log(takeLoad);
    } else return false;
  }

  function getAlert(sms) {
    setOpenOne(false);
    toast.success(`ü¶Ñ ${sms}! `, {
      position: "top-right",
      autoClose: 2000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      transition: Bounce,
    });
  }

  function changeLoadValue() {
    let valueLoad = takeLoad;
    let valueUnload = unload;
    setTakeLoad(valueUnload);
    setUnload(valueLoad);
  }

  function sendApplication() {
    let obj = {
      takeLoad,
      unload,
      TruckValue,
      dateTime,
      countWorker,
      numberValue,
      textareaValue,
      hour: takeHour,
    };
    if (checkEmpty()) {
      getAlert("request send succesfullt");
    } else getAlert("sending message error");

    console.log(obj);
  }

  function sendHour(event) {
    setTakeHour(event.target.value);
  }

  function changeTruckValue(event) {
    setTruckValue(event);
    let select = document.querySelector("#selectHour");
    select.setAttribute("disabled", "true");
    select.classList.add("changeColorSelect");

    if (event == "none") {
      setCarValue(0);
      if (countWorker == 0) {
        select.removeAttribute("disabled");
        select.classList.remove("changeColorSelect");
      }
    }

    if (event == "–õ–∞–±–æ") {
      let value = 100000 * takeHour + 100000;
      setCarValue(value);
    }

    if (event == "–ì–∞–∑–µ–ª—å") {
      let value = 150000 * takeHour + 100000;
      setCarValue(value);
    }

    if (event == "–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 3 –º–µ—Ç—Ä–∞") {
      let value = 150000 * takeHour + 100000;
      setCarValue(value);
    }
    if (event == "–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 4 –º–µ—Ç—Ä–∞") {
      let value = 170000 * takeHour + 100000;
      setCarValue(value);
    }
    if (event == "–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 5 –º–µ—Ç—Ä–∞") {
      let value = 200000 * takeHour + 100000;
      setCarValue(value);
    }
    if (event == "–ò—Å—É–∑—É 5 —Ç–æ–Ω–Ω") {
      let value = 2400000;
      setCarValue(value);
    }
    if (event == "–ò—Å—É–∑—É 10 —Ç–æ–Ω–Ω") {
      let value = 2800000;
      setCarValue(value);
    }
    if (event == "–§—É—Ä–∞ 22 —Ç–æ–Ω–Ω—ã") {
      let value = 3200000;
      setCarValue(value);
    }
  }

  return (
    <div className=" firstComp" id="first">
      <Carousel className="grCol">
        <Carousel.Item interval={3000}>
          <div className="image-container">
            <div className="image-background"></div>
          </div>
          <Carousel.Caption className="bigImgText">
            <div className="wrapper">
              <h1>–ö–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥</h1>
              <p>
                Eastline Express - –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –≤–µ—â–∏
                —Ç—É–¥–∞, –∫—É–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ.
              </p>
            </div>
          </Carousel.Caption>
        </Carousel.Item>

        <Carousel.Item interval={3000}>
          <div className="imgFirst"></div>
          <div className="image-container">
            <div className="image-background image-background-two"></div>
          </div>

          <Carousel.Caption className="bigImgText">
            <div className="wrapper">
              <h1>–£—Å–ª—É–≥–∏ –≥—Ä—É–∑—á–∏–∫–æ–≤</h1>
              <p>
                –ì—Ä—É–∑—á–∏–∫–∏ –ø–æ —Å—É—Ç–∏ –¥–µ–ª–∞ —è–≤–ª—è—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏ –≤ —Ö–æ–¥–µ
                –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–æ–∫. <br /> –û–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Å—å –ø–µ—Ä–µ—á–µ–Ω—å
                —Ä–∞–±–æ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–µ–∑–¥–µ.
              </p>
              {/* <h3>–æ—Ç 255 000 —Å—É–º–æ–≤</h3> */}
            </div>
          </Carousel.Caption>
        </Carousel.Item>

        <Carousel.Item interval={3000}>
          <div className="image-container">
            <div className="image-background image-background-three"></div>
          </div>

          <Carousel.Caption className="bigImgText">
            <div className="wrapper">
              <h1>–û—Ñ–∏—Å–Ω—ã–π –ø–µ—Ä–µ–µ–∑–¥</h1>
              <p>
                –ü–µ—Ä–µ–µ–∑–¥ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞ –≤ –¥—Ä—É–≥–æ–π - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –æ—á–µ–Ω—å —Ö–ª–æ–ø–æ—Ç–Ω–æ–µ
                –∑–∞–Ω—è—Ç–∏–µ, <br /> —Ç—Ä–µ–±—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
              </p>
            </div>
          </Carousel.Caption>
        </Carousel.Item>
      </Carousel>

      <div className="newCalculator customModalOne">
        <h1>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h1>
        <div className="rowTop">
          <div>
            <label htmlFor="rowTopInputLeft">–ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏</label>
            <input
              value={takeLoad}
              onChange={(e) => {
                setTakeLoad(e.target.value);
              }}
              type="text"
              className="form-control"
              id="rowTopInputLeft"
              placeholder="–ø–æ–≥—Ä—É–∑–∫–∏"
            />
          </div>
          <button onClick={changeLoadValue}>
            <GoArrowSwitch />
          </button>
          <div>
            <label htmlFor="rowTopInputRight">–ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏</label>
            <input
              value={unload}
              onChange={(e) => {
                setUnload(e.target.value);
              }}
              type="text"
              className="form-control"
              id="rowTopInputRight"
              placeholder="–≤—ã–≥—Ä—É–∑–∫–∏"
            />
          </div>
        </div>

        <div className="rowMiddleOne">
          <div>
            <label htmlFor="rowMiddleOneInputRight">–ö–æ–≥–¥–∞</label>
            <input
              value={dateTime}
              onChange={(e) => setDateTime(e.target.value)}
              type="date"
              className="form-control"
              id="rowMiddleOneInputRight"
            />
          </div>
          <button>==</button>

          <div>
            <label htmlFor="rowMiddleOneInputLeft">–í—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É</label>
            <select
              id="rowMiddleOneInputLeft"
              className="form-select"
              onChange={(e) => changeTruckValue(e.target.value)}
            >
              <option value="none">–í—ã–±—Ä–∞—Ç—å...</option>
              <option value="–õ–∞–±–æ">–õ–∞–±–æ / –í–∏—Å–æ—Ç–∞ 1,3–º / –í–µ—Å—å, 0,5—Ç</option>
              <option value="–ì–∞–∑–µ–ª—å">–ì–∞–∑–µ–ª—å / –í–∏—Å–æ—Ç–∞ 1,5–º / –í–µ—Å—å, 1,5—Ç</option>
              <option value="–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 3 –º–µ—Ç—Ä–∞">
                –¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 3 –º–µ—Ç—Ä–∞ / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 4 –º–µ—Ç—Ä–∞">
                –¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 4 –º–µ—Ç—Ä–∞ / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 5 –º–µ—Ç—Ä–∞">
                –¢–µ–Ω—Ç –≤—ã—Å–æ–∫—ã–π 5 –º–µ—Ç—Ä–∞ / –í–µ—Å—å, 1,5—Ç
              </option>
              <option value="–ò—Å—É–∑—É 5 —Ç–æ–Ω–Ω">
                –ò—Å—É–∑—É 5 —Ç–æ–Ω–Ω —á–∞—Å –Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—Ç–æ—á–Ω—ã–π
              </option>
              <option value="–ò—Å—É–∑—É 10 —Ç–æ–Ω–Ω">
                –ò—Å—É–∑—É 10 —Ç–æ–Ω–Ω —á–∞—Å –Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—Ç–æ—á–Ω—ã–π
              </option>
              <option value="–§—É—Ä–∞ 22 —Ç–æ–Ω–Ω—ã">
                –§—É—Ä–∞ 22 —Ç–æ–Ω–Ω—ã —á–∞—Å –Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—Ç–æ—á–Ω—ã–π
              </option>
            </select>
          </div>
        </div>

        <div className="rowMiddleTwo">
          <div className="middleTwoLeft">
            <label htmlFor="rowMiddleTwoInputLeft">–ì—Ä—É–∑—á–∏–∫–∏</label>
            <div className="leftDivMiddleTwo" id="rowMiddleTwoInputLeft">
              <h5>{countWorker}</h5>
              <div>
                <button onClick={decrement}>-</button>
                <button onClick={() => increment()}>+</button>
              </div>
            </div>
          </div>
          <button className="btnMiddleTwo">==</button>
          <div className="middleRightTwo">
            <label htmlFor="rowMiddleTwoInputRight">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
            <input
              value={numberValue}
              onChange={(e) => setNumberValue(e.target.value)}
              type="text"
              className="form-control"
              id="rowMiddleTwoInputRight"
              placeholder="+998"
            />
          </div>
        </div>
        <div className="selectHour">
          <label htmlFor="selectHour">—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤</label>
          <select
            id="selectHour"
            onChange={(event) => sendHour(event)}
            className="form-select"
          >
            <option value="1">1 - –û–¥–∏–Ω —á–∞—Å</option>
            <option value="2">2 - –î–≤–∞ —á–∞—Å–∞</option>
            <option value="3">3 - –¢—Ä–∏ —á–∞—Å–∞ </option>
            <option value="4">4 - –ß–µ—Ç—ã—Ä–µ —á–∞—Å–∞ </option>
            <option value="5">5 - –ü—è—Ç—å —á–∞—Å–æ–≤ </option>
          </select>
        </div>
        <div className="rowBottom">
          <label htmlFor="rowBottom">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
          <textarea
            value={textareaValue}
            onChange={(e) => setTextAreaValue(e.target.value)}
            rows={3}
            id="rowBottom"
            className="form-control"
            placeholder="write text here"
          ></textarea>
        </div>

        <button className="buttonBottom" onClick={sendApplication}>
          –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞ {summ + carValue + " —Å—É–º"}
        </button>
      </div>
    </div>
  );
}
